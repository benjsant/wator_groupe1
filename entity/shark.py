import random
from entity.fish import Fish
from entity.clown_fish import ClownFish
from utils.config import *

class Shark(Fish):
    """
    Classe repr√©sentant les requins

        - SHARK_REPRODUCTION_TIME : temps de reproduction par d√©faut des requins
        - chronon_shark : repr√©sente le temps qui s'√©coule pour le requin (un chronon = une action)
        - shark_energy : energie des requins -> √† 0 il meurt
        - alive : bool√©en indiquant si le requin est vivant ou non
        - img : repr√©sentation graphique du requin

    """    

    SHARK_REPRODUCTION_TIME: int = shark_reproduction_time # Modifiable dans utils/config.py 
    img: str = "ü¶à"
    
    
    def __init__(self, x, y):
        super().__init__(x, y)
        self.chronon_shark: int = 0
        self.shark_energy: int = shark_starting_energy # Modifiable dans utils/config.py
        self.alive: bool = True
        

    def move(self, grid) -> None:
        '''
            On commence par incr√©menter leurs chronons.
            On d√©finit les 4 directions, et on les rend al√©atoires.
            On parcourt une fois les directions dans une boucle pour v√©rifier si il y a un poisson 
            a proximit√© pour le faire passer en priorit√© et le manger.
            Si il n'y a pas de poisson, on refait une boucle pour choisir une case al√©atoire parmis les cases vides.
            On termine ces boucles en v√©rifiant si ils sont encore en vie apr√®s leur action.
        
        '''
        self.chronon_shark_one_turn()

        # on d√©finit les 4 directions, puis on les rend al√©atoires
        directions=[(0,1),(1,0),(0,-1),(-1,0)]
        random.shuffle(directions)

        for dx, dy in directions:
            new_x = (self.x + dx) % len(grid[0]) # on d√©finit x et y pour la nouvelle position, avec effet de tore
            new_y = (self.y + dy) % len(grid)
            neighbor = grid[new_y][new_x] # on d√©finit la cellule voisine avec ces x et y

            # On v√©rifie d'abord si un poisson est voisin pour le faire passer en priorit√©
            if isinstance(neighbor, ClownFish):
                neighbor.alive = False  # on indique que le poisson n'est plus en vie
                grid[new_y][new_x] = " " # pour supprimer le poisson
                self.eat()  # le requin se nourrit
                grid[self.y][self.x] = " "  # on supprime le requin de son emplacement
                self.x = new_x  # x et y prennent leur nouvelle valeur
                self.y = new_y
                grid[new_y][new_x] = self   # le requin est positionn√© sur son nouvel emplacement
                self.is_alive(grid=grid)    # on v√©rifie son √©nergie et si il est toujours en vie
                return
        
        # si pas de poisson voisin, d√©placement al√©atoire
        for dx, dy in directions:
            new_x = (self.x + dx) % len(grid[0])
            new_y = (self.y + dy) % len(grid)

            if grid[new_y][new_x] == " ": # On v√©rifie si l'emplacement est libre
                grid[self.y][self.x] = " "
                self.x = new_x 
                self.y = new_y
                grid[new_y][new_x] = self
                self.is_alive(grid=grid)
                return

    def eat(self) -> None:
       '''
            Lorsque le requin mange, on augmente son √©nergie
       '''
       self.shark_energy += energy_by_eating # modifiable dans utils/config.py


    def reproduce(self, x, y) -> object|None:  
        """
            Fonction g√©rant la reproduction des requins
            Lorsque les chronons du requins atteignent son √¢ge de reproduction,
            on cr√©e un nouveau requin, et les chronons sont r√©initialis√©s

        """        

        if self.chronon_shark >= self.SHARK_REPRODUCTION_TIME:
            self.chronon_shark = 0
            return Shark(x = x, y = y)
        return None
        

    def chronon_shark_one_turn(self):
        """ 
            Fonction incr√©mentant les chronons du requin
        """
        self.chronon_shark += 1
    

    def is_alive(self, grid):
        """Fonction v√©rifiant si le requin est toujours en vie
        Si la variable shark_energy tombe √† 0, le requin dispara√Æt

        Args:
            grid (list):  Grid (list of list), environnement dans lequel √©volue le requin
        """
        self.shark_energy -= 1
        if self.shark_energy <= 0:
            grid[self.y][self.x] = " "
            self.alive= False
            
